// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infra.Data;

#nullable disable

namespace infra.Migrations
{
    [DbContext(typeof(ApplicationDbContextmariadb))]
    [Migration("20230124072355_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Use")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "45d90da8-f386-4e9e-a878-2f737c361930",
                            RoleId = "b3ab38ab-fa69-480d-afbd-1a0e626587d5"
                        },
                        new
                        {
                            UserId = "45d90da8-f386-4e9e-a878-2f737c361930",
                            RoleId = "a1acdc89-3be3-41a3-8b28-4df5c2749e6f"
                        },
                        new
                        {
                            UserId = "98e5995d-15ae-47a5-9a16-fae9a5b58f14",
                            RoleId = "a1acdc89-3be3-41a3-8b28-4df5c2749e6f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("infra.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EnterDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("IdNumber")
                        .HasMaxLength(10)
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "45d90da8-f386-4e9e-a878-2f737c361930",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5e7c361-197a-4c3b-b11e-16f8d5146ec3",
                            DirectorateId = 1,
                            Email = "arabmed@gmail.com",
                            EmailConfirmed = true,
                            EnterDateTime = new DateTime(1973, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Admin first",
                            IdNumber = 2202861957L,
                            IsEnabled = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARABMED@GMAIL.COM",
                            NormalizedUserName = "ARABMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHipFc41XrFgAjMjorgMMo+hxLOks3W1C2TUiqVWFeSFjcj3P9D4ef5hTGlvG1dEdg==",
                            PhoneNumber = "0508698954",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8db86343-91ea-4771-85b5-04f1220482e1",
                            TwoFactorEnabled = false,
                            UserName = "arabmed@gmail.com",
                            UserPhone = "0508698954",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = "98e5995d-15ae-47a5-9a16-fae9a5b58f14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab18e1be-8bea-4afb-a611-a120bdb26d26",
                            DirectorateId = 1,
                            Email = "r@rme.me",
                            EmailConfirmed = true,
                            EnterDateTime = new DateTime(1973, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "مدير الموقع ",
                            IdNumber = 1111111111L,
                            IsEnabled = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "R@RME.ME",
                            NormalizedUserName = "R@RME.ME",
                            PasswordHash = "AQAAAAIAAYagAAAAEGAORhHGE3p1i/5sELPr+9zvM7NFlhU/lUz258yQbhl9dNVfYs7nPnjHGQZCIVAVQQ==",
                            PhoneNumber = "0508698954",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a967d3f-920d-4217-bbfd-67e5a74ab68b",
                            TwoFactorEnabled = false,
                            UserName = "r@rme.me",
                            UserPhone = "0508698954",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("infra.Models.error.ApiError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsError")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("apierror");
                });

            modelBuilder.Entity("infra.Models.infra.Directorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("directorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "  منطقة الرياض"
                        });
                });

            modelBuilder.Entity("infra.Models.infra.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("SchoolTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("SchoolTypesId");

                    b.ToTable("schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorateId = 1,
                            Email = "arabmed@gmail.com",
                            Name = " مدرسة تجربة المثالية",
                            SchoolTypesId = 1
                        });
                });

            modelBuilder.Entity("infra.Models.infra.SchoolType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("schooltypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "  حكومي"
                        },
                        new
                        {
                            Id = 2,
                            Name = "  اهلي"
                        });
                });

            modelBuilder.Entity("infra.Models.infra.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "الادارة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "معلم"
                        },
                        new
                        {
                            Id = 3,
                            Name = "طالب"
                        });
                });

            modelBuilder.Entity("infra.Models.infra.UsersSchool", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("usersschools");
                });

            modelBuilder.Entity("infra.Models.infra.Usersclassroom", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("classroomsId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "classroomsId");

                    b.HasIndex("classroomsId");

                    b.ToTable("Usersclassrooms");
                });

            modelBuilder.Entity("infra.Models.infra.classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("classrooms");
                });

            modelBuilder.Entity("infra.Models.infra.edumaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("edumaterials");
                });

            modelBuilder.Entity("infra.Models.infra.evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("evaluations");
                });

            modelBuilder.Entity("infra.Models.infra.usersedumaterial", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("edumaterialsId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "edumaterialsId");

                    b.HasIndex("edumaterialsId");

                    b.ToTable("usersedumaterials");
                });

            modelBuilder.Entity("infra.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "b3ab38ab-fa69-480d-afbd-1a0e626587d5",
                            Name = "SuperMuder",
                            NormalizedName = "SUPERMUDER",
                            Description = "المدير العام للموقع"
                        },
                        new
                        {
                            Id = "a1acdc89-3be3-41a3-8b28-4df5c2749e6f",
                            Name = "Muder",
                            NormalizedName = "MUDER",
                            Description = "أدارة الموقع"
                        },
                        new
                        {
                            Id = "284993cf-0c3a-4d30-a197-7ddf15f289a4",
                            Name = "Tech",
                            NormalizedName = "TECH",
                            Description = " مدرس "
                        },
                        new
                        {
                            Id = "63c8ddee-fa69-4cf9-9598-7bdd0fbfc3e3",
                            Name = "STudent",
                            NormalizedName = "STUDENT",
                            Description = "طالب"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("infra.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("infra.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infra.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("infra.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("infra.Models.infra.School", b =>
                {
                    b.HasOne("infra.Models.infra.Directorate", "Directorate")
                        .WithMany("Schools")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("infra.Models.infra.SchoolType", "SchoolTypes")
                        .WithMany("Schools")
                        .HasForeignKey("SchoolTypesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directorate");

                    b.Navigation("SchoolTypes");
                });

            modelBuilder.Entity("infra.Models.infra.UsersSchool", b =>
                {
                    b.HasOne("infra.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UsersSchools")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infra.Models.infra.School", "School")
                        .WithMany("UsersSchools")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("School");
                });

            modelBuilder.Entity("infra.Models.infra.Usersclassroom", b =>
                {
                    b.HasOne("infra.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Usersclassrooms")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infra.Models.infra.classroom", "classrooms")
                        .WithMany("Usersclassrooms")
                        .HasForeignKey("classroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("classrooms");
                });

            modelBuilder.Entity("infra.Models.infra.usersedumaterial", b =>
                {
                    b.HasOne("infra.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("usersedumaterials")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("infra.Models.infra.edumaterial", "edumaterials")
                        .WithMany("usersedumaterials")
                        .HasForeignKey("edumaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("edumaterials");
                });

            modelBuilder.Entity("infra.Models.ApplicationUser", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UsersSchools");

                    b.Navigation("Usersclassrooms");

                    b.Navigation("usersedumaterials");
                });

            modelBuilder.Entity("infra.Models.infra.Directorate", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("infra.Models.infra.School", b =>
                {
                    b.Navigation("UsersSchools");
                });

            modelBuilder.Entity("infra.Models.infra.SchoolType", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("infra.Models.infra.classroom", b =>
                {
                    b.Navigation("Usersclassrooms");
                });

            modelBuilder.Entity("infra.Models.infra.edumaterial", b =>
                {
                    b.Navigation("usersedumaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
